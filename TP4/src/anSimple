%{
#include <stdio.h>
#include <ctype.h>
#include <string.h>

#define YYDEBUG 1

int flag_error = 0; 
int linea = 1;

extern FILE* yyin;
FILE* yyout;


int yylex();

int yywrap()
{
    return(1);
}

void yyerror (char *smth) {
   fprintf (yyout,"error sintactico = %s\n", smth);
}

%}

%token <entero> NUMERO_ENTERO
%token <real> NUMERO_REAL
%token <texto> IDENTIFICADOR
%token <texto> LITERALCADENA
%token <caracter> CARACTER
%token <entero> error

//%type <texto> ID

%token P_INC
%token P_DEC 
%token DISTINTO 
%token IGUAL 
%token AND 
%token OR 
%token DIV_IGUAL
%token POR_IGUAL
%token MENOS_IGUAL
%token MAS_IGUAL 
%token MENOR_IGUAL
%token MAYOR_IGUAL
%token MOD_IGUAL 
%token BIT_SHIFT_L
%token BIT_SHIFT_R
%token FLECHITA
%token IGUALSIMPLE
%token DO
%token WHILE
%token IF
%token ELSE
%token FOR
%token RETURN
%token GOTO
%token STATIC
%token EXTERN
%token CONST
%token VOLATILE
%token STRUCT
%token UNION
%token TYPEDEF
%token AUTO
%token REGISTER
%token CHAR
%token INT
%token FLOAT
%token LONG
%token SHORT
%token SIGNED
%token UNSIGNED
%token VOID
%token ENUM
%token DOUBLE
%token SIZEOF
%token SWITCH
%token CASE
%token BREAK
%token DEFAULT
%token CONTINUE
%token CARO

%union {
    int entero;
    char* texto;
    char caracter;
    float real;
}
 
%start expresion
%% 

expresion: tipoDato string igual num ';' {fprintf(yyout,"soy una expresion \n");}
;

tipoDato: INT {fprintf(yyout,"un int\n");}
        | FLOAT
;
string: CARO {fprintf(yyout,"aca ta caro \n");}
;

igual: IGUALSIMPLE     {fprintf(yyout,"el igual\n");}
;

num: NUMERO_ENTERO    {fprintf(yyout,"el num \n");}
;

%%

int main (){

  int flag;

  yyin = fopen("entrada.c", "r");
  yyout = fopen("salida.txt", "w");

  #ifdef BISON_DEBUG
       yydebug = 1;
    #endif

  flag = yyparse ();
  fclose(yyin);
  fclose(yyout);
  return flag;
}